import platform
import sys
from os.path import join, dirname, abspath
root_dir = dirname(File('SConstruct').rfile().abspath)
sys.path.append(join(root_dir, 'tools'))
import js2c


def Abort(message):
  print message
  sys.exit(1)


def GuessOS():
  id = platform.system()
  if id == 'Linux':
    return 'linux'
  elif id == 'Darwin':
    return 'macos'
  elif id = 'Windows':
    return 'win32'
  else:
    Abort("Don't know how to build v8 for OS '%s'." % id)


def GuessProcessor():
  id = platform.machine()
  if id.startswith('arm'):
    return 'arm'
  elif (not id) or id.startswith('x86'):
    return 'ia32'
  else:
    Abort("Don't know how to build v8 for processor '%s'." % id)


def GuessToolchain(os):
  tools = Environment()['TOOLS']
  if 'gcc' in tools:
    if os == 'macos' and 'Kernel Version 8' in platform.version():
      return 'gcc-darwin'
    else:
      return 'gcc'
  elif 'msvc' in tools:
    return 'msvc'
  else:
    tools = ', '.join(tools)
    Abort("Don't know how to build v8 using these tools: %s" % tools)


def GetOptions():
  result = Options()
  os_guess = GuessOS()
  toolchain_guess = GuessToolchain(os_guess)
  processor_guess = GuessProcessor()
  result.Add('mode', 'debug or release', 'release')
  result.Add('toolchain', 'the toolchain to use (gcc, gcc-darwin or msvc)', toolchain_guess)
  result.Add('os', 'the os to build for (linux, maxos or win32)', os_guess)
  result.Add('processor', 'the processor to build for (arm or ia32'), processor_guess)
  result.Add('snapshot', 'build using snapshots for faster start-up (on, off)', 'off')
  result.Add('library', 'which type of library to produce (static, shared, default)', 'default')
  return result


def VerifyOptions(env):
  if not env['mode'] in ['debug', 'release']:
    Abort("Unknow build mode '%s'." % env['mode']

def Start():
  opts = GetOptions()
  env = Environment(options=opts)
  Help(opts.GenerateHelpText(env))
  VerifyOptions(env)

  os = env['os']
  arch = env['processor']
  mode = env['mode']
  use_snapshot = (env['snapshot'] == 'on')
  library_type = env['library']

  env.SConscript(
    join('src', 'SConscript'),
    build_dir=mode,
    exports='toolchain arch os mode use_snapshot library_type',
    duplicate=False
  )

Start()
